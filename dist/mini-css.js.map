{"version":3,"file":"mini-css.js","sources":["../js/utils.js","../js/mini-css.js"],"sourcesContent":["/**\r\n * Helper functions when converting an object to a css string\r\n */\r\n\r\n// https://gist.github.com/nblackburn/875e6ff75bc8ce171c758bf75f304707\r\nexport const camelCaseToKebabCase = function(string) {\r\n    return string.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\n// Slightly modified version of https://github.com/natew/object-to-css\r\nexport const convertObjectToCss = function(obj) {\r\n    const keys = Object.keys(obj);\r\n    if (!keys.length) { return ''; }\r\n    let i, len = keys.length;\r\n    let result = '';\r\n  \r\n    for (i = 0; i < len; i++) {\r\n      const key = keys[i];\r\n      const val = obj[key];\r\n      result += camelCaseToKebabCase(key) + ':' + val + ';';\r\n    }\r\n  \r\n    return result;\r\n}","import { convertObjectToCss } from \"./utils.js\";\r\n\r\n/**\r\n * @author Conor Irwin <https://github.com/RetroVX> \r\n * @license {@link http://opensource.org/licenses/MIT|MIT License}\r\n * @class styleIn\r\n * @classdesc\r\n * A small library to create css within javascript using template literals or objects\r\n * @version 1.0.0\r\n * @example\r\n * // either create your own stylesheet and pass in the sheet or use createStyleSheet()\r\n * const css = new miniCSS().createStyleSheet();\r\n * // add new css rule on id\r\n * css.set('.container', `background-color: red;`).set('#header', { backgroundColor: 'yellow' });\r\n */\r\nexport default class miniCSS {\r\n\r\n    constructor(sheet) {\r\n\r\n        /**\r\n         * @name miniCSS.sheet\r\n         * The stylesheet.sheet that is either passed in on class creation or when using\r\n         * miniCSS.createStyleSheet();\r\n         */\r\n        this.sheet = sheet;\r\n\r\n        return this;\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Creates a style element and sets miniCSS.sheet to the stylesheet.sheet\r\n     * @name miniCSS.createStyleSheet\r\n     * @type {function}\r\n     * @example\r\n     * css.createStyleSheet(); ||\r\n     * new miniCSS().createStyleSheet();\r\n     */\r\n    createStyleSheet() {\r\n        const style = document.createElement(\"style\");\r\n        document.head.appendChild(style);\r\n        this.sheet = style.sheet;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Finds all rules in the stylesheet with the selector and returns an array\r\n     * @name miniCSS.get\r\n     * @type {function}\r\n     * @param {*} selector - Selector to find rules by\r\n     * @returns {Array} - Returns an array with the rules with the provided selector\r\n     * @example\r\n     * css.get('yourSelector');\r\n     * css.get('#id');\r\n     * css.get('.class');\r\n     */\r\n    get(selector) {\r\n        const getSelectors = [];\r\n        const rules = this.getRules();\r\n\r\n        for(let i = 0; i < rules.length; i++) {\r\n\r\n            if(rules[i].includes(selector)) {\r\n                getSelectors.push(rules[i]);\r\n            }\r\n        }\r\n\r\n        return getSelectors;\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets new rules to the stylesheet with the provided selector.\r\n     * You can pass in either a string or an object to create the styles\r\n     * @name miniCSS.set\r\n     * @type {function}\r\n     * @param {string} selector - Selector to set rules for\r\n     * @param {string||object} style - css styles to add\r\n     * @example\r\n     * css.set('#id', `background-color: red;`);\r\n     * css.set('.class', { backgroundColor: 'green' });\r\n     */\r\n    set(selector, style) {\r\n\r\n        const sheet = this.sheet;\r\n        let rule;\r\n\r\n        if(typeof style === 'string') {\r\n            rule = `${selector} { ${style} }`;\r\n        }\r\n        else if(typeof style === 'object') {\r\n            const convert = convertObjectToCss(style);\r\n            rule = `${selector} { ${convert} }`;\r\n        }\r\n        \r\n        // insert at the end\r\n        const index = sheet.cssRules.length;\r\n        sheet.insertRule(rule, index);\r\n\r\n        return this;\r\n    }\r\n\r\n    \r\n    /**\r\n     * Removes a rule from the stylesheet from the sheet.cssRules array.\r\n     * @name miniCSS.remove\r\n     * @type {function}\r\n     * @param {number} index - the index of the rule inside the sheet.cssRules array\r\n     * @example\r\n     * // removes first index of cssRules array\r\n     * css.remove(0);\r\n     */\r\n    remove(index) {\r\n        const sheet = this.sheet;\r\n\r\n        sheet.removeRule(index);\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * Sets a new stylesheet.sheet to use\r\n     * @name miniCSS.setSheet\r\n     * @type {function}\r\n     * @param {*} sheet - the stylesheet.sheet\r\n     * @example\r\n     * const newStyleSheet = document.createElement(\"style\");\r\n     * document.head.appendChild(newStyleSheet);\r\n     * const sheet = newStyleSheet.sheet;\r\n     * css.setSheet(sheet);\r\n     */\r\n    setSheet(sheet) {\r\n        this.sheet = sheet;\r\n\r\n        return this;\r\n    }\r\n\r\n\r\n    /**\r\n     * An array holding all the css rules that have been added using set()\r\n     * @name miniCSS.getRules\r\n     * @type {function}\r\n     * @returns {Array} - Returns an array with each rule from sheet.cssRules.cssText\r\n     * @example\r\n     * css.getRules();\r\n     */\r\n    getRules() {\r\n        const cssRules = this.sheet.cssRules;\r\n        const rules = [];\r\n\r\n        for(let i = 0; i < cssRules.length; i++) {\r\n            rules.push(cssRules[i].cssText);\r\n        }\r\n\r\n        return rules;\r\n    }\r\n}"],"names":["const","camelCaseToKebabCase","string","replace","toLowerCase","convertObjectToCss","obj","keys","Object","length","i","len","result","key","val","miniCSS","constructor","sheet","createStyleSheet","style","document","createElement","head","appendChild","get","selector","getSelectors","rules","getRules","let","includes","push","set","rule","convert","index","cssRules","insertRule","remove","removeRule","setSheet","cssText"],"mappings":"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"}